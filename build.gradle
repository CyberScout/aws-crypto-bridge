plugins {
    id 'io.freefair.lombok' version '4.1.6' apply false
    id "org.unbroken-dome.test-sets" version "2.2.1" apply false
    id 'com.jfrog.bintray' version '1.8.4' apply false
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.freefair.lombok'

    group 'com.cyberscout.crypto'
    version '0.1.0'

    sourceCompatibility = 1.8

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    def awsEncryption = [
            'org.bouncycastle:bcprov-jdk15on:1.64',
            'com.amazonaws:aws-encryption-sdk-java:1.6.1',
            'com.amazonaws:aws-java-sdk:1.11.701',
    ]
    ext.awsEncryption = awsEncryption
    def unitTesting = [
            'junit:junit:4.12',
            'org.mockito:mockito-core:3.2.4',
    ]

    dependencies {
        compileOnly awsEncryption
        testImplementation unitTesting
    }
}

//
// Integration Tests
//

// List modules that need integration tests here...
def integrationTestProjects = [
        project(':aws-crypto-hibernate3'),
]

configure(integrationTestProjects) {
    apply plugin: 'org.unbroken-dome.test-sets'

    testSets {
        integTest { dirName = 'integ-test' }
    }
}

//
// Publishing
//
subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    task sourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    publishing {
        repositories {
            maven {
                name = 'GitHubPackages'
                url = uri('https://maven.pkg.github.com/CyberScout/aws-crypto-bridge')
                credentials {
                    username = System.getenv('GH_USER')
                    password = System.getenv('GH_PA_TOKEN')
                }
            }
        }
        publications {
            maven(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                groupId = project.group
                artifactId = project.name
                version = project.version
                pom {
                    name = projectName
                    description = projectDesc
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'http://www.opensource.org/licenses/mit-license.php'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'cyberscout'
                            name = 'CyberScout, LLC'
                            email = 'dev-support@cyberscout.com'
                            url = 'https://cyberscout.com'
                        }
                    }
                    scm {
                        connection = 'https://github.com/CyberScout/aws-crypto-bridge.git'
                        developerConnection = 'git@github.com:CyberScout/aws-crypto-bridge.git'
                        url = 'https://github.com/CyberScout/aws-crypto-bridge'
                    }
                }
            }
        }
    }

    //
    // Bintray Publishing
    //
    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = ['maven']
        publish = true
        override = true
        pkg {
            userOrg = 'cyberscout'
            repo = 'cyberscout-oss-maven'
            name = project.name
            licenses = ['MIT']
            vcsUrl = 'https://github.com/CyberScout/aws-crypto-bridge.git'
            githubRepo = 'CyberScout/aws-crypto-bridge'
            publicDownloadNumbers = true
            version {
                name = project.version
                released = new Date()
                gpg {
                    sign = true
                }
            }
        }
    }

    //
    // Uber-Publish Task
    //
    task cdPublish(dependsOn: [check, javadoc, bintrayUpload, publishMavenPublicationToGitHubPackagesRepository]) {
        description 'Publish artifacts to distribution points'
        group 'publishing'
    }

    bintrayUpload.mustRunAfter check
}
